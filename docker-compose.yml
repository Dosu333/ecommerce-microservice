services:
  user_postgres:
    image: postgres:14.1-alpine
    container_name: user_db
    restart: always
    env_file:
      - ./user_service/.env
    networks:
      - ecommerce-network
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  order_postgres:
    image: postgres:14.1-alpine
    container_name: order_db
    restart: always
    env_file:
      - ./order_service/.env
    networks:
      - ecommerce-network
    ports:
      - "5433:5432"
    volumes:
      - order_postgres_data:/var/lib/postgresql/data

  cart_postgres:
    image: postgres:14.1-alpine
    container_name: cart_db
    restart: always
    env_file:
      - ./cart_service/.env
    networks:
      - ecommerce-network
    ports:
      - "5434:5432"
    volumes:
      - cart_postgres_data:/var/lib/postgresql/data

  payment_postgres:
    image: postgres:14.1-alpine
    container_name: payment_db
    restart: always
    env_file:
      - ./payment_service/.env
    networks:
      - ecommerce-network
    ports:
      - "5435:5432"
    volumes:
      - payment_postgres_data:/var/lib/postgresql/data

  redis:
    image: bitnami/redis:latest
    container_name: redis_cache
    env_file:
      - ./.env
    networks:
      - ecommerce-network
    restart: always
    ports:
      - "6379:6379"

  user-service:
    build: ./user_service
    container_name: user-service
    restart: always
    depends_on:
      - user_postgres
      - redis
    env_file:
      - ./user_service/.env
    networks:
      - ecommerce-network
    ports:
      - "8000:8000"
    volumes:
      - ./user_service/app:/app
    command: python manage.py runserver 0.0.0.0:8000

  product-service:
    build: ./product_service
    container_name: product-service
    restart: always
    env_file:
      - ./product_service/.env
    networks:
      - ecommerce-network
    ports:
      - "8002:8002"
      - "50051:50051"
    volumes:
      - ./product_service/app:/app
      - ./grpc_protos:/app/grpc_protos
    command: python manage.py runserver 0.0.0.0:8002

  order-service:
    build: ./order_service
    container_name: order-service
    restart: always
    depends_on:
      - order_postgres
      - redis
      - product-service
    env_file:
      - ./order_service/.env
    networks:
      - ecommerce-network
    ports:
      - "8003:8003"
    volumes:
      - ./order_service/app:/app
      - ./grpc_protos:/app/grpc_protos
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8003 &
             python manage.py payment_listener"

  cart-service:
    build: ./cart_service
    container_name: cart-service
    restart: always
    depends_on:
      - cart_postgres
      - redis
    env_file:
      - ./cart_service/.env
    networks:
      - ecommerce-network
    ports:
      - "8004:8004"
    volumes:
      - ./cart_service/app:/app
    command: python manage.py runserver 0.0.0.0:8004

  payment-service:
    build: ./payment_service
    container_name: payment-service
    restart: always
    depends_on:
      - payment_postgres
      - redis
    env_file:
      - ./payment_service/.env
    networks:
      - ecommerce-network
    ports:
      - "3000:3000"
    volumes:
      - ./payment_service:/app
    command: /entrypoint.sh

  celery_worker_user:
    build: ./user_service
    container_name: user_service_celery_worker
    restart: always
    depends_on:
      - redis
      - user-service
    env_file:
      - ./user_service/.env
    networks:
      - ecommerce-network
    volumes:
      - ./user_service/app:/app
    command: celery -A core worker --loglevel=info --queues=user_queue --logfile=logs/celery.log

  celery_worker_product:
    build: ./product_service
    container_name: product_service_celery_worker
    restart: always
    depends_on:
      - redis
      - product-service
    env_file:
      - ./product_service/.env
    networks:
      - ecommerce-network
    volumes:
      - ./product_service/app:/app
    command: celery -A core worker --loglevel=info --queues=product_queue --logfile=logs/celery.log

  celery_worker_order:
    build: ./order_service
    container_name: order_service_celery_worker
    restart: always
    depends_on:
      - redis
      - order-service
    env_file:
      - ./order_service/.env
    networks:
      - ecommerce-network
    volumes:
      - ./order_service/app:/app
    command: celery -A core worker --loglevel=info --queues=order_queue --logfile=logs/celery.log

  celery_worker_cart:
    build: ./cart_service
    container_name: cart_service_celery_worker
    restart: always
    depends_on:
      - redis
      - cart-service
    env_file:
      - ./cart_service/.env
    networks:
      - ecommerce-network
    volumes:
      - ./cart_service/app:/app
    command: celery -A core worker --loglevel=info --queues=cart_queue --logfile=logs/celery.log

  celery_beat_user:
    build: ./user_service
    container_name: celery_beat_user
    restart: always
    depends_on:
      - redis
      - celery_worker_user
    env_file:
      - ./user_service/.env
    networks:
      - ecommerce-network
    volumes:
      - ./user_service/app:/app
    command: celery -A core beat --loglevel=info

  celery_beat_cart:
    build: ./cart_service
    container_name: celery_beat_cart
    restart: always
    depends_on:
      - redis
      - celery_worker_cart
    env_file:
      - ./cart_service/.env
    networks:
      - ecommerce-network
    volumes:
      - ./cart_service/app:/app
    command: celery -A core beat --loglevel=info

  flower:
    image: mher/flower
    container_name: flower_dashboard
    restart: always
    depends_on:
      - redis
      - celery_worker_user
      - celery_worker_product
    env_file:
      - ./.env
    networks:
      - ecommerce-network
    ports:
      - "5555:5555"
    command: celery --broker=${REDIS_URL} flower --port=5555

networks:
  ecommerce-network:
    driver: bridge

volumes:
  postgres_data:
  order_postgres_data:
  cart_postgres_data:
  payment_postgres_data:
